/*
 * notifier
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddEmailChannelBody;
import org.openapitools.client.model.AddTelegramChannelBody;
import org.openapitools.client.model.SendNotificationBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CrateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CrateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for handleAddEmailChannel
     * @param addEmailChannelBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleAddEmailChannelCall(AddEmailChannelBody addEmailChannelBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addEmailChannelBody;

        // create path and map variables
        String localVarPath = "/add_channel/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleAddEmailChannelValidateBeforeCall(AddEmailChannelBody addEmailChannelBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addEmailChannelBody' is set
        if (addEmailChannelBody == null) {
            throw new ApiException("Missing the required parameter 'addEmailChannelBody' when calling handleAddEmailChannel(Async)");
        }
        

        okhttp3.Call localVarCall = handleAddEmailChannelCall(addEmailChannelBody, _callback);
        return localVarCall;

    }

    /**
     * Add email channel
     * Add email channel  Add email notification channel for user 
     * @param addEmailChannelBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public void handleAddEmailChannel(AddEmailChannelBody addEmailChannelBody) throws ApiException {
        handleAddEmailChannelWithHttpInfo(addEmailChannelBody);
    }

    /**
     * Add email channel
     * Add email channel  Add email notification channel for user 
     * @param addEmailChannelBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> handleAddEmailChannelWithHttpInfo(AddEmailChannelBody addEmailChannelBody) throws ApiException {
        okhttp3.Call localVarCall = handleAddEmailChannelValidateBeforeCall(addEmailChannelBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add email channel (asynchronously)
     * Add email channel  Add email notification channel for user 
     * @param addEmailChannelBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleAddEmailChannelAsync(AddEmailChannelBody addEmailChannelBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleAddEmailChannelValidateBeforeCall(addEmailChannelBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for handleAddTelegramChannel
     * @param addTelegramChannelBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleAddTelegramChannelCall(AddTelegramChannelBody addTelegramChannelBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTelegramChannelBody;

        // create path and map variables
        String localVarPath = "/add_channel/telegram";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleAddTelegramChannelValidateBeforeCall(AddTelegramChannelBody addTelegramChannelBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addTelegramChannelBody' is set
        if (addTelegramChannelBody == null) {
            throw new ApiException("Missing the required parameter 'addTelegramChannelBody' when calling handleAddTelegramChannel(Async)");
        }
        

        okhttp3.Call localVarCall = handleAddTelegramChannelCall(addTelegramChannelBody, _callback);
        return localVarCall;

    }

    /**
     * Add telegram channel
     * Add telegram channel  Add telegram notification channel for user 
     * @param addTelegramChannelBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public void handleAddTelegramChannel(AddTelegramChannelBody addTelegramChannelBody) throws ApiException {
        handleAddTelegramChannelWithHttpInfo(addTelegramChannelBody);
    }

    /**
     * Add telegram channel
     * Add telegram channel  Add telegram notification channel for user 
     * @param addTelegramChannelBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> handleAddTelegramChannelWithHttpInfo(AddTelegramChannelBody addTelegramChannelBody) throws ApiException {
        okhttp3.Call localVarCall = handleAddTelegramChannelValidateBeforeCall(addTelegramChannelBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add telegram channel (asynchronously)
     * Add telegram channel  Add telegram notification channel for user 
     * @param addTelegramChannelBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Channel added successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleAddTelegramChannelAsync(AddTelegramChannelBody addTelegramChannelBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleAddTelegramChannelValidateBeforeCall(addTelegramChannelBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for handleSendNotification
     * @param sendNotificationBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleSendNotificationCall(SendNotificationBody sendNotificationBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendNotificationBody;

        // create path and map variables
        String localVarPath = "/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handleSendNotificationValidateBeforeCall(SendNotificationBody sendNotificationBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendNotificationBody' is set
        if (sendNotificationBody == null) {
            throw new ApiException("Missing the required parameter 'sendNotificationBody' when calling handleSendNotification(Async)");
        }
        

        okhttp3.Call localVarCall = handleSendNotificationCall(sendNotificationBody, _callback);
        return localVarCall;

    }

    /**
     * Send notification
     * Send notification  send notification to user with given id on all channels registered for that user 
     * @param sendNotificationBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public void handleSendNotification(SendNotificationBody sendNotificationBody) throws ApiException {
        handleSendNotificationWithHttpInfo(sendNotificationBody);
    }

    /**
     * Send notification
     * Send notification  send notification to user with given id on all channels registered for that user 
     * @param sendNotificationBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> handleSendNotificationWithHttpInfo(SendNotificationBody sendNotificationBody) throws ApiException {
        okhttp3.Call localVarCall = handleSendNotificationValidateBeforeCall(sendNotificationBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send notification (asynchronously)
     * Send notification  send notification to user with given id on all channels registered for that user 
     * @param sendNotificationBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Notification sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handleSendNotificationAsync(SendNotificationBody sendNotificationBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = handleSendNotificationValidateBeforeCall(sendNotificationBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
